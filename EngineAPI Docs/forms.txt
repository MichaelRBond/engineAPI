##############
CSRF Checking

To prevent against cross site request forgery attacks EngineAPI requires that all POST forms include a CSRF check variable. This is a hidden input field that is generated by engine. 

Usage in PHP:

$output .= sessionInsertCSRF();

Where $output is the variable that will be printed to the screen. 

Usage in HTML:

{engine name="csrf"}

or 

{engine name="insertCSRF"}

###########

Get and Post Variables

EngineAPI automatically destroys the values in $_GET and $_POST. This is so that we don't accidentally use date that is not sanitized input from untrusted sources. Instead EngineAPI provides 2 new arrays which contain data that has been sanitized for HTML output (printing to the screen/back to the user), for MYSQL (safe for insertion into or working with databases), as well as the data as it was provided by the user. 

$engine->cleanGet['HTML']
$engine->cleanGet['MYSQL']
$engine->cleanGet['RAW']

$engine->cleanPost['HTML']
$engine->cleanPost['MYSQL']
$engine->cleanPost['RAW']

NOTE: Raw data should never be used, unless there is a reason that escaped data will cause issues with the application.

Such an instance is when working with JSON data. If the data is passed back to the application via GET or POST, sanitizing it will destroy it. Instead we must work with the RAW data. In the case of JSON, EngineAPI provides tools to work with it safely:

// Get the JSON Data
$data = json_decode($this->engine->cleanGet['RAW']['data'],TRUE);
// Sanitize the data
$data = jsonSanitize($this->data,"mysql");